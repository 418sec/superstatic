#!/usr/bin/env node

var path = require('path');
var chokidar = require('chokidar');
var argv = require('minimist')(process.argv.slice(2));
var superstatic = require('../lib/superstatic');
var defaults = require('../lib/defaults');
var ConfigFile = require('../lib/server/settings/file');
var jsun = require('jsun');
var fs = require('fs');
var _ = require('lodash');
var feedback = require('feedback');
var server;

var ERROR_PAGE = __dirname + '/not_found.html';
var NOT_FOUND_PAGE = __dirname + '/not_found.html';

// app working directory
var cwd = argv._[0] ? path.resolve(process.cwd(), argv._[0]) : defaults.DIRECTORY;
var port = argv.port || argv.p || defaults.PORT;
var host = argv.host || argv.h || defaults.HOST;
var overrideConfig =  parseOverrideConfig(argv);
var envJSON = path.join(cwd, "./.env.json");
var debug = (argv.quiet || argv.q) ? false : defaults.DEBUG;
var services = parseServices(argv);

//
startServer();

// Watch config file for changes
process.nextTick(function () {
  try{
    chokidar.watch(server.settings.getConfigFileName())
      .on('change', configFileChanged);
  }
  catch (e) {}
});

function startServer () {
  var domain = require('domain');
  var d = domain.create();
  
  d.run(function () {
    server = createInstance(cwd);
    server.start(function () {
      console.log('\nServer started on port ' + port);
    });
  });
  
  d.on('error', serverErrorHandler);
}

function createInstance (cwd) {
  var localEnv;
  
  try {localEnv = require(envJSON);}
  catch (e) {}
  
  /////////////////////////////
  // TODO: move redirects to own module file
  var redirects = function (req, res, next) {
    var globject = require('globject');
    var slash = require('slasher');
    var redirects = globject(slash(req.config.redirects));
    var redirectUrl = redirects(req.url);
    
    if (!redirectUrl) return next();
    
    res.writeHead(301, {Location: redirectUrl});
    res.end();
  };
  
  redirects.matchesRequest = function (req, done) {
    var slash = require('slasher');
    var redirects = slash(req.config.redirects || {});
    
    done(redirects.hasOwnProperty(req.url));
  };
  /////////////////////
  
  var serverOptions = {
    port: port,
    host: host,
    environment: localEnv,
    cwd: cwd,
    config: overrideConfig || argv.c || argv.config || 'superstatic.json',
    debug: debug,
    _defaults: require('./_defaults'), // Insert defaults into settings
    services: services
  };
  
  return new superstatic.Server(serverOptions);
};

function configFileChanged () {
  console.log('Configuration file changed. Restarting...');
  server.stop(startServer);
}

function serverErrorHandler (err) {
  var msg = err.message;
  
  if (err.message.indexOf('EADDRINUSE') > -1) msg = 'That port is already being used by another program.';
  
  feedback.error(msg);
}

function parseOverrideConfig (argv) {
  var overrideConfig = argv.config || argv.c || undefined;
  
  if (overrideConfig) {
    var parsed = jsun.parse(overrideConfig);
    if (parsed.err) return overrideConfig = undefined;
    
    overrideConfig = parsed.json;
  }
  
  return overrideConfig;
}

function parseServices (argv) {
  var s = (argv.services) ? argv.services.split(',') : [];
  
  return _(s)
    .map(function (name) {return name.toLowerCase()})
    .map(function (name) {
      var serviceModule = tryRequire('superstatic-' + name) || tryRequire(name);
      if (serviceModule) return [name, serviceModule];
    })
    .filter(_.identity)
    .zipObject()
    .value();
}

function tryRequire (moduleName) {
  var serviceModule;
  
  try {serviceModule = require(moduleName);}
  catch (e) {}
  
  return serviceModule;
}